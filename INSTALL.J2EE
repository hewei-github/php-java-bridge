Overview
--------

The J2EE interface associates a PHP web context or the entire J2EE
server with a managed and persistent PHP executable or an external
HTTP server running PHP.

This document describes how to call Java methods from PHP. And how to
embed PHP applications into a pure Java application server or servlet
engine. Please see the INSTALL.J2SE document for details how to call
PHP methods from a pure Java application.

Installation
------------

* Install a J2EE application server or servlet engine, for example
  Apache Geronimo, Tomcat, Glassfish, ...

* Copy your Java libraries, PHP executables or PHP libraries into
  JavaBridgeTemplate.war and rename it to "myPhpApp.war" or similar.

* Copy your web application myPhpApp.war to the autodeploy folder of
  your J2EE server or servlet engine. If you don't have a myPhpApp.war
  yet, simply rename "JavaBridge.war" to "myPhpApp.war".

  Example for Tomcat on Unix:
  
    cp myPhpApp.war $CATALINA_HOME/webapps/

  Example for Apache Geronimo on Windows:

    copy myPhpApp.war "\Program Files\IBM\WebSphereCommunityEdition\deploy"

  Wait until the "myPhpApp" directory appears (restart your J2EE
  server, if necessary).


* If you want to run PHP as a sub component of the J2EE server or
  servlet engine, visit http://localhost:8080/myPhpApp and click on
  test.php. 

* If you want to run PHP as a sub component of Apache or IIS or from
  the command line, require() Java.inc directly from the back end.
  Or embed it into your PHP application and use the provided
  Java class as usual.

* Firewall-out the J2EE/Servlet port 8080, if necessary. Or modify the
  J2EE/Servlet so that it listens only on the local interface. Note that
  in the default setup the PHP/Java Bridge rejects requests from non-local
  PHP clients. For a intranet server start the J2EE/Servlet VM with the
  parameter -Dphp.java.bridge.promiscuous=true or set the "promiscuous"
  init-param in the J2EE WEB-INF/web.xml and make sure that your
  computer cannot be accessed from the internet. At least firewall-out
  the ports 8080 and all ports in the range [9267,...,[9367 and read the
  "security" sections from README.


JSR 223 Script API
------------------

* It is possible to run PHP scripts in servlets. The examples below
  use JSP to demonstrate the features (in JSP "this" is the Servlet,
  "application" is the ServletContext and "request", "response" the
  HttpServletRequest and HttpServletResponse objects.

  The web application needs a context listener declared in 
  WEB-INF/web.xml:

   <listener>
       <listener-class>php.java.servlet.ContextLoaderListener</listener-class>
   </listener>
   <listener>
       <listener-class>php.java.servlet.RequestListener</listener-class>
   </listener>

  And the JavaBridge.jar, php-servlet.jar, php-script.jar, script-api.jar
  must be available in the WEB-INF/lib directory.

  Servlets can then access PHP scripts as follows:

  <%
    javax.script.ScriptEngine e = 
      php.java.script.servlet.EngineFactory.getPhpScriptEngine (this, 
                                                        application, 
                                                        request, response);
    e.getContext().setWriter (out);
    e.eval ("<?php phpinfo(); ?>");
    e.eval (new java.io.FileReader("otherScript.php"));
    ...
  %>
  
  The script engine reserves up to three continuations, one for the
  JSP, one for PHP (PhpCGIServlet) and a optional Java continuation
  (PhpJavaServlet).  If the servlet engine thread pool cannot allocate
  three threads, a PhpScriptTemporarilyOutOfResourcesException is
  thrown.
  

  The InvocablePhpScriptEngine can be accessed as follows:

  <%
    javax.script.ScriptEngine e = 
      php.java.script.servlet.EngineFactory.getInvocablePhpScriptEngine (this, 
                                                        application, 
                                                        request, response);
    e.getContext().setWriter (out);
    e.eval ("<?php function hello() {echo "hello";}; ?>");
    javax.script.Invocable i = (javax.script.Invocable) e;
    i.invokeFunction ("hello", new Object[]{});
    ...
    e.eval ((java.io.Reader)null);
  %>

  The script engine reserves three continuations, one for the JSP, one
  for PHP (PhpCGIServlet) and a Java continuation (PhpJavaServlet). If
  the servlet engine thread pool cannot allocate three threads, a
  PhpScriptTemporarilyOutOfResourcesException is thrown.


Further information
-------------------

Our FAQ contains examples which show how to create a distributable PHP
web application, how to enable PHP for all Tomcat web applications and
and how to set up a load balancer for a Tomcat cluster.


* Please report bugs/problems to the mailing list:

    php-java-bridge-users@lists.sourceforge.net


